#include <stdio.h>
#include <limits.h>

//delete character in buffer memory
void clean() {
    while (getchar() != '\n');
}
// get valid size of array (return positive number)
int getValidSize(int min, int max, const char* error) {
    int inputNumber;
    int check;
    char inputChar;
    while (1) {
        check = scanf("%d%c", &inputNumber, &inputChar);
        if (check != 2 || inputChar != '\n') {
        	clean();
            printf("%s", error);
        } else if (inputNumber < min || inputNumber > max)
            printf("Please input number form %d to %d: ", min, max);
        else return inputNumber;
    }
}
// get valid element(return number)
long long int getValidElement(const char* error,int position) {
    long long int inputNumber;
    int check;
    char inputChar;
    while (1) {
        printf("Element[%d]=",position);
        check = scanf("%lld%c", &inputNumber, &inputChar);
        if (check != 2 || inputChar != '\n') {
        	clean();
            printf("%s", error);
        }
        else return inputNumber;
    }
}
//user's input
void input(int *sizeArray,long long int *array)
{
    printf("Please enter size of array: ");
    *sizeArray=getValidSize(0,INT_MAX,"Invalid size of array!! Just enter integer: ");
    array=(long long int *)realloc(array,((*sizeArray)+1)*sizeof(long long int));
    //array=(long long int *)realloc(array,(*sizeArray)*sizeof(long long int));
    //array=(long long int *)calloc(*sizeArray,sizeof(long long int));
    int i;
    for (i=0;i<*sizeArray;i++)
    {
        array[i]=getValidElement("Invalid element!! Just enter integer:\t",i);
    }

}
//delete an element in array
void delete(int *sizeArray,long long int *array,int position)
{
    int i;
    for (i=position;i<*sizeArray;i++){
        array[i]=array[i+1];
    }
    (*sizeArray)--;
}
//print array to screen
void output(int *sizeArray,long long int *array)
{
    int i;
    for (i=0;i<*sizeArray;i++){
        printf("%lld\t",array[i]);
    }
    printf("\n");
}

void process(int *sizeArray,long long int *array)
{
    int *isDuplicate;
    isDuplicate=(int *)calloc(*sizeArray,sizeof(int));
    int i;
    int j;
    //check if an element duplicate
    for (i=0;i<*sizeArray-1;i++){
        for (j=i+1;j<*sizeArray;j++){
            if (array[i]==array[j]){
                isDuplicate[i]=1;
            }
        }
    }
    output(sizeArray,array);
    for (i=*sizeArray-1;i>=0;i--){
        if (isDuplicate[i]==1){
            delete(sizeArray,array,i);
        }
    }
    output(sizeArray,array);
}
int main()
{
    int sizeArray;
    long long int *array;
    array=(long long int *)malloc(100*sizeof(long long int));
    input(&sizeArray,array);
    process(&sizeArray,array);
    return 0;
}

